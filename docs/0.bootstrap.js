(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/gravitle.js":
/*!**************************!*\
  !*** ../pkg/gravitle.js ***!
  \**************************/
/*! exports provided: __wbg_log_db0ce4382904de06, __widl_f_now_Performance, __widl_instanceof_Window, __widl_f_performance_Window, __wbg_newnoargs_9fab447a311888a5, __wbg_call_001e26aeb2fdef67, __wbindgen_throw, Collision, Intersection, LinkIntersection, LinkToCreate, Trajectory, Universe, WrapAround, __wbindgen_object_clone_ref, __wbindgen_object_drop_ref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_log_db0ce4382904de06\", function() { return __wbg_log_db0ce4382904de06; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_now_Performance\", function() { return __widl_f_now_Performance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_instanceof_Window\", function() { return __widl_instanceof_Window; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_performance_Window\", function() { return __widl_f_performance_Window; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_newnoargs_9fab447a311888a5\", function() { return __wbg_newnoargs_9fab447a311888a5; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_call_001e26aeb2fdef67\", function() { return __wbg_call_001e26aeb2fdef67; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Collision\", function() { return Collision; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Intersection\", function() { return Intersection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinkIntersection\", function() { return LinkIntersection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinkToCreate\", function() { return LinkToCreate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Trajectory\", function() { return Trajectory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WrapAround\", function() { return WrapAround; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_clone_ref\", function() { return __wbindgen_object_clone_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony import */ var _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gravitle_bg */ \"../pkg/gravitle_bg.wasm\");\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n        let size = arg.length;\n        let ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let writeOffset = 0;\n        while (true) {\n            const view = getUint8Memory().subarray(ptr + writeOffset, ptr + size);\n            const { read, written } = cachedTextEncoder.encodeInto(arg, view);\n            writeOffset += written;\n            if (read === arg.length) {\n                break;\n            }\n            arg = arg.substring(read);\n            ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size += arg.length * 3);\n        }\n        WASM_VECTOR_LEN = writeOffset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](buf.length);\n        getUint8Memory().set(buf, ptr);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nlet cachegetFloat64Memory = null;\nfunction getFloat64Memory() {\n    if (cachegetFloat64Memory === null || cachegetFloat64Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetFloat64Memory = new Float64Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetFloat64Memory;\n}\n\nfunction getArrayF64FromWasm(ptr, len) {\n    return getFloat64Memory().subarray(ptr / 8, ptr / 8 + len);\n}\n\nfunction passArray32ToWasm(arg) {\n    const ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](arg.length * 4);\n    getUint32Memory().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction __wbg_log_db0ce4382904de06(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    console.log(varg0);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction __widl_f_now_Performance(arg0) {\n    return getObject(arg0).now();\n}\n\nfunction __widl_instanceof_Window(idx) { return getObject(idx) instanceof Window ? 1 : 0; }\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction __widl_f_performance_Window(arg0) {\n\n    const val = getObject(arg0).performance;\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nfunction __wbg_newnoargs_9fab447a311888a5(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    return addHeapObject(new Function(varg0));\n}\n\nfunction handleError(exnptr, e) {\n    const view = getUint32Memory();\n    view[exnptr / 4] = 1;\n    view[exnptr / 4 + 1] = addHeapObject(e);\n}\n\nfunction __wbg_call_001e26aeb2fdef67(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).call(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freeCollision(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_collision_free\"](ptr);\n}\n/**\n*/\nclass Collision {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Collision.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeCollision(ptr);\n    }\n\n    /**\n    * @param {number} particle_1_index\n    * @param {number} particle_2_index\n    * @returns {Collision}\n    */\n    static new(particle_1_index, particle_2_index) {\n        return Collision.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_new\"](particle_1_index, particle_2_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_1_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_get_particle_1_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_2_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_get_particle_2_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeIntersection(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_intersection_free\"](ptr);\n}\n/**\n*/\nclass Intersection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Intersection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeIntersection(ptr);\n    }\n\n    /**\n    * @param {number} intersection_x\n    * @param {number} intersection_y\n    * @param {number} link_id\n    * @param {number} particle_id\n    * @returns {Intersection}\n    */\n    static new(intersection_x, intersection_y, link_id, particle_id) {\n        return Intersection.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_new\"](intersection_x, intersection_y, link_id, particle_id));\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_x() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_intersection_x\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_y() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_intersection_y\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_link_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_link_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_particle_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeLinkIntersection(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_linkintersection_free\"](ptr);\n}\n/**\n*/\nclass LinkIntersection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LinkIntersection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeLinkIntersection(ptr);\n    }\n\n    /**\n    * @param {number} intersection_x\n    * @param {number} intersection_y\n    * @param {number} link_1_index\n    * @param {number} link_2_index\n    * @returns {LinkIntersection}\n    */\n    static new(intersection_x, intersection_y, link_1_index, link_2_index) {\n        return LinkIntersection.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_new\"](intersection_x, intersection_y, link_1_index, link_2_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_x() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_get_intersection_x\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_y() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_get_intersection_y\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_link_1_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_get_link_1_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_link_2_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_get_link_2_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeLinkToCreate(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_linktocreate_free\"](ptr);\n}\n/**\n*/\nclass LinkToCreate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LinkToCreate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeLinkToCreate(ptr);\n    }\n\n    /**\n    * @param {number} particle_1_index\n    * @param {number} particle_2_index\n    * @returns {LinkToCreate}\n    */\n    static new(particle_1_index, particle_2_index) {\n        return LinkToCreate.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linktocreate_new\"](particle_1_index, particle_2_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_1_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linktocreate_get_particle_1_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_2_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linktocreate_get_particle_2_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeTrajectory(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_trajectory_free\"](ptr);\n}\n/**\n*/\nclass Trajectory {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Trajectory.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeTrajectory(ptr);\n    }\n\n}\n\nfunction freeUniverse(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n}\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        return Universe.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"]());\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    load_from_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_load_from_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tick\"](this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    reset() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_reset\"](this.ptr);\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    set_particles_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_particles_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    set_links_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_links_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    add_particle_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_add_particle_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} algorithm_string\n    * @returns {void}\n    */\n    set_algorithm_from_string(algorithm_string) {\n        const ptr0 = passStringToWasm(algorithm_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_algorithm_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} collision_behavior_string\n    * @returns {void}\n    */\n    set_collision_behavior_from_string(collision_behavior_string) {\n        const ptr0 = passStringToWasm(collision_behavior_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_collision_behavior_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} intersection_behavior_string\n    * @returns {void}\n    */\n    set_intersection_behavior_from_string(intersection_behavior_string) {\n        const ptr0 = passStringToWasm(intersection_behavior_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_intersection_behavior_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} link_intersection_behavior_string\n    * @returns {void}\n    */\n    set_link_intersection_behavior_from_string(link_intersection_behavior_string) {\n        const ptr0 = passStringToWasm(link_intersection_behavior_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_link_intersection_behavior_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} wrap_around_behavior_string\n    * @returns {void}\n    */\n    set_wrap_around_behavior_from_string(wrap_around_behavior_string) {\n        const ptr0 = passStringToWasm(wrap_around_behavior_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_wrap_around_behavior_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {boolean} wrap_around\n    * @returns {void}\n    */\n    set_wrap_around(wrap_around) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_wrap_around\"](this.ptr, wrap_around);\n    }\n    /**\n    * @param {number} minimal_distance_for_gravity\n    * @returns {void}\n    */\n    set_minimal_distance_for_gravity(minimal_distance_for_gravity) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_minimal_distance_for_gravity\"](this.ptr, minimal_distance_for_gravity);\n    }\n    /**\n    * @param {number} default_link_length\n    * @returns {void}\n    */\n    set_default_link_length(default_link_length) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_default_link_length\"](this.ptr, default_link_length);\n    }\n    /**\n    * @param {number} default_link_strengh\n    * @returns {void}\n    */\n    set_default_link_strengh(default_link_strengh) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_default_link_strengh\"](this.ptr, default_link_strengh);\n    }\n    /**\n    * @param {number} drag_coefficient\n    * @returns {void}\n    */\n    set_drag_coefficient(drag_coefficient) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_drag_coefficient\"](this.ptr, drag_coefficient);\n    }\n    /**\n    * @param {boolean} stabilise_positions_enabled\n    * @returns {void}\n    */\n    set_stabilise_positions_enabled(stabilise_positions_enabled) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_stabilise_positions_enabled\"](this.ptr, stabilise_positions_enabled);\n    }\n    /**\n    * @param {number} stabiliser_power\n    * @returns {void}\n    */\n    set_stabiliser_power(stabiliser_power) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_stabiliser_power\"](this.ptr, stabiliser_power);\n    }\n    /**\n    * @param {number} gravitational_constant\n    * @returns {void}\n    */\n    set_gravitational_constant(gravitational_constant) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_gravitational_constant\"](this.ptr, gravitational_constant);\n    }\n    /**\n    * @param {number} width\n    * @returns {void}\n    */\n    set_width(width) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_width\"](this.ptr, width);\n    }\n    /**\n    * @param {number} height\n    * @returns {void}\n    */\n    set_height(height) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_height\"](this.ptr, height);\n    }\n    /**\n    * @param {number} delta_time\n    * @returns {void}\n    */\n    set_delta_time(delta_time) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_delta_time\"](this.ptr, delta_time);\n    }\n    /**\n    * @param {boolean} fixed_clone_count\n    * @returns {void}\n    */\n    set_fixed_clone_count(fixed_clone_count) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_fixed_clone_count\"](this.ptr, fixed_clone_count);\n    }\n    /**\n    * @returns {string}\n    */\n    get_infos() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_infos\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @returns {number}\n    */\n    get_delta_time_milli() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_delta_time_milli\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_delta_time() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_delta_time\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_links() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_links_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_width() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_width\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_height() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_height\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersections() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersections\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersections_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersections_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_size() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersection_size\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} id\n    * @returns {Intersection}\n    */\n    get_intersection(id) {\n        return Intersection.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersection\"](this.ptr, id));\n    }\n    /**\n    * @returns {number}\n    */\n    get_trajectories_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectories_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} id\n    * @returns {Trajectory}\n    */\n    get_trajectory(id) {\n        return Trajectory.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectory\"](this.ptr, id));\n    }\n    /**\n    * @param {number} period\n    * @returns {Float64Array}\n    */\n    get_trajectories_position_at_period(period) {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectories_position_at_period\"](retptr, this.ptr, period);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles_to_disable_indexes_length() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles_to_disable_indexes_length\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Float64Array}\n    */\n    get_gravitational_grid(width, height) {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_gravitational_grid\"](retptr, this.ptr, width, height);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get_links_coordinates_to_draw() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links_coordinates_to_draw\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get_thrusting_links_coordinates_to_draw() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_thrusting_links_coordinates_to_draw\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @param {Uint32Array} link_indexes\n    * @returns {void}\n    */\n    activate_thrust_for_links(link_indexes) {\n        const ptr0 = passArray32ToWasm(link_indexes);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_activate_thrust_for_links\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {Uint32Array} link_indexes\n    * @returns {void}\n    */\n    deactivate_thrust_for_links(link_indexes) {\n        const ptr0 = passArray32ToWasm(link_indexes);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_deactivate_thrust_for_links\"](this.ptr, ptr0, len0);\n    }\n}\n\nfunction freeWrapAround(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_wraparound_free\"](ptr);\n}\n/**\n*/\nclass WrapAround {\n\n    static __wrap(ptr) {\n        const obj = Object.create(WrapAround.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeWrapAround(ptr);\n    }\n\n    /**\n    * @param {number} particle_index\n    * @returns {WrapAround}\n    */\n    static new(particle_index) {\n        return WrapAround.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"wraparound_new\"](particle_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"wraparound_get_particle_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction __wbindgen_object_clone_ref(idx) {\n    return addHeapObject(getObject(idx));\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n\n\n//# sourceURL=webpack:///../pkg/gravitle.js?");

/***/ }),

/***/ "../pkg/gravitle_bg.wasm":
/*!*******************************!*\
  !*** ../pkg/gravitle_bg.wasm ***!
  \*******************************/
/*! exports provided: memory, __wbindgen_global_argument_ptr, __wbg_universe_free, universe_new, universe_load_from_json, universe_tick, universe_reset, universe_set_particles_json, universe_set_links_json, universe_add_particle_json, universe_set_algorithm_from_string, universe_set_collision_behavior_from_string, universe_set_intersection_behavior_from_string, universe_set_link_intersection_behavior_from_string, universe_set_wrap_around_behavior_from_string, universe_set_wrap_around, universe_set_minimal_distance_for_gravity, universe_set_default_link_length, universe_set_default_link_strengh, universe_set_drag_coefficient, universe_set_stabilise_positions_enabled, universe_set_stabiliser_power, universe_set_gravitational_constant, universe_set_width, universe_set_height, universe_set_delta_time, universe_set_fixed_clone_count, universe_get_infos, universe_get_delta_time_milli, universe_get_delta_time, universe_get_particles, universe_get_particles_count, universe_get_links, universe_get_links_count, universe_get_width, universe_get_height, universe_get_intersections, universe_get_intersections_count, universe_get_intersection_size, universe_get_intersection, universe_get_trajectories_count, universe_get_trajectory, universe_get_trajectories_position_at_period, universe_get_particles_to_disable_indexes_length, universe_get_gravitational_grid, universe_get_links_coordinates_to_draw, universe_get_thrusting_links_coordinates_to_draw, universe_activate_thrust_for_links, universe_deactivate_thrust_for_links, __wbg_intersection_free, intersection_new, intersection_get_intersection_x, intersection_get_intersection_y, intersection_get_link_index, intersection_get_particle_index, __wbg_linkintersection_free, linkintersection_new, linkintersection_get_intersection_x, linkintersection_get_intersection_y, linkintersection_get_link_1_index, linkintersection_get_link_2_index, __wbg_wraparound_free, wraparound_new, wraparound_get_particle_index, __wbg_collision_free, collision_new, collision_get_particle_1_index, collision_get_particle_2_index, __wbg_linktocreate_free, linktocreate_new, linktocreate_get_particle_1_index, linktocreate_get_particle_2_index, __wbg_trajectory_free, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./gravitle */ \"../pkg/gravitle.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/gravitle_bg.wasm?");

/***/ }),

/***/ "./examples.js":
/*!*********************!*\
  !*** ./examples.js ***!
  \*********************/
/*! exports provided: get_example_1_conf, get_example_2_conf, get_example_3_conf, get_example_4_conf, get_example_5_conf, get_example_6_conf, get_example_7_conf, get_example_8_conf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_example_1_conf\", function() { return get_example_1_conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_example_2_conf\", function() { return get_example_2_conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_example_3_conf\", function() { return get_example_3_conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_example_4_conf\", function() { return get_example_4_conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_example_5_conf\", function() { return get_example_5_conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_example_6_conf\", function() { return get_example_6_conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_example_7_conf\", function() { return get_example_7_conf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_example_8_conf\", function() { return get_example_8_conf; });\nconst get_example_1_conf = (conf) => {\n    conf.stabilise_positions_enabled = true;\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 20\n        }, {\n            \"x\": 10,\n            \"y\": 30\n        }, {\n            \"x\": 20,\n            \"y\": 30\n        }, {\n            \"x\": 30,\n            \"y\": 20\n        }, {\n            \"x\": 20,\n            \"y\": 5\n        }, {\n            \"x\": 10,\n            \"y\": -10\n        }, {\n            \"x\": 0,\n            \"y\": -20\n        }, {\n            \"x\": -10,\n            \"y\": 30\n        }, {\n            \"x\": -20,\n            \"y\": 30\n        }, {\n            \"x\": -30,\n            \"y\": 20\n        }, {\n            \"x\": -20,\n            \"y\": 5\n        }, {\n            \"x\": -10,\n            \"y\": -10\n        }, {\n            \"x\": 0,\n            \"y\": -35\n        }\n    ];\n    return conf;\n}\n\nconst get_example_2_conf = (conf) => {\n    conf.particles = [\n        {\n            \"x\": -30,\n            \"y\": -40,\n            \"fixed\": false\n        }, {\n            \"x\": -30,\n            \"y\": -41,\n            \"fixed\": false\n        }, {\n            \"x\": 0,\n            \"y\": 41,\n            \"fixed\": false\n        }, {\n            \"x\": 20,\n            \"y\": 20,\n            \"fixed\": true\n        }, {\n            \"x\": 20,\n            \"y\": -20,\n            \"fixed\": true\n        }, {\n            \"x\": -20,\n            \"y\": 20,\n            \"fixed\": true\n        }, {\n            \"x\": -20,\n            \"y\": -20,\n            \"fixed\": true\n        }, {\n            \"x\": 0,\n            \"y\": 40,\n            \"fixed\": true\n        }, {\n            \"x\": 0,\n            \"y\": -40,\n            \"fixed\": true\n        }, {\n            \"x\": 40,\n            \"y\": 0,\n            \"fixed\": true\n        }, {\n            \"x\": -40,\n            \"y\": 0,\n            \"fixed\": true\n        }\n    ];\n    return conf;\n}\n\nconst get_example_3_conf = (conf) => {\n    conf.particles = [\n        {\n            \"x\": 0.01,\n            \"y\": -25,\n            \"fixed\": false\n        },\n        {\n            \"x\": 10,\n            \"y\": -35,\n            \"fixed\": false\n        },\n        {\n            \"x\": -10,\n            \"y\": -35,\n            \"fixed\": false\n        },\n        {\n            \"x\": 0,\n            \"y\": 40,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": 40,\n            \"y\": -10,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": -40,\n            \"y\": -10,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        }\n    ];\n    return conf;\n};\n\nconst get_example_4_conf = (conf) => {\n    conf.intersection_behavior = 'destroy-link';\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 35\n        },\n        {\n            \"x\": 10,\n            \"y\": 25,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": 25,\n            \"fixed\": true\n        },{\n            \"x\": 15,\n            \"y\": 15,\n            \"fixed\": true\n        },\n        {\n            \"x\": -15,\n            \"y\": 15,\n            \"fixed\": true\n        },{\n            \"x\": 20,\n            \"y\": 5,\n            \"fixed\": true\n        },\n        {\n            \"x\": -20,\n            \"y\": 5,\n            \"fixed\": true\n        },{\n            \"x\": 15,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": -15,\n            \"y\": 0,\n            \"fixed\": true\n        },{\n            \"x\": 5,\n            \"y\": -5,\n            \"fixed\": true\n        },\n        {\n            \"x\": -5,\n            \"y\": -5,\n            \"fixed\": true\n        },{\n            \"x\": 10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": -10,\n            \"fixed\": true\n        }\n    ];\n    conf.links = [\n        {\n            \"p1_index\": 1,\n            \"p2_index\": 2\n        }, {\n            \"p1_index\": 3,\n            \"p2_index\": 4\n        }, {\n            \"p1_index\": 5,\n            \"p2_index\": 6\n        }, {\n            \"p1_index\": 7,\n            \"p2_index\": 8\n        }, {\n            \"p1_index\": 9,\n            \"p2_index\": 10\n        }, {\n            \"p1_index\": 11,\n            \"p2_index\": 12\n        }\n    ];\n    return conf;\n}\n\nconst get_example_5_conf = (conf) => {\n    conf.intersection_behavior = 'destroy-particle';\n    conf.default_link_strengh = 0.0;\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 0\n        },\n        {\n            \"x\": -10,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 10,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": 10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": -40,\n            \"y\": 35,\n            \"fixed\": false\n        },\n        {\n            \"x\": 40,\n            \"y\": 35,\n            \"fixed\": false\n        },\n        {\n            \"x\": -50,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 50,\n            \"y\": 30,\n            \"fixed\": true\n        }\n    ];\n    conf.links = [\n        {\n            \"p1_index\": 0,\n            \"p2_index\": 1\n        },\n        {\n            \"p1_index\": 0,\n            \"p2_index\": 2\n        },\n        {\n            \"p1_index\": 3,\n            \"p2_index\": 4\n        },\n        {\n            \"p1_index\": 5,\n            \"p2_index\": 6\n        }\n    ];\n    return conf;\n}\n\nconst get_example_6_conf = (conf) => {\n    conf.collision_behavior = 'create-link';\n    conf.intersection_behavior = 'destroy-link';\n    conf.gravitational_constant = 100;\n    conf.default_link_length = 10;\n    conf.default_link_strengh = 1000;\n    conf.drag_coefficient = 1;\n    conf.stabilise_positions_enabled = false;\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": 30,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": -30,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": 0,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 0,\n            \"y\": -30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 20,\n            \"y\": 20\n        },\n        {\n            \"x\": 20,\n            \"y\": -20\n        },\n        {\n            \"x\": -20,\n            \"y\": 20\n        },\n        {\n            \"x\": -20,\n            \"y\": -20\n        },\n        {\n            \"x\": 0,\n            \"y\": 20\n        },\n        {\n            \"x\": 0,\n            \"y\": -20\n        },\n        {\n            \"x\": 20,\n            \"y\": 0\n        },\n        {\n            \"x\": -20,\n            \"y\": 0\n        }\n    ];\n    return conf;\n}\n\nconst get_example_7_conf = (conf) => {\n    conf.collision_behavior = 'create-link';\n    conf.intersection_behavior = 'destroy-link';\n    conf.gravitational_constant = 100;\n    conf.default_link_length = 10;\n    conf.default_link_strengh = 1000;\n    conf.drag_coefficient = 1;\n    conf.stabilise_positions_enabled = false;\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 0\n        },\n        {\n            \"x\": 0,\n            \"y\": 0\n        }\n    ];\n    return conf;\n}\n\nconst get_example_8_conf = (conf) => {\n    conf.collision_behavior = 'create-link';\n    conf.link_intersection_behavior = 'destroy-links';\n    conf.drag_coefficient = 1;\n    conf.gravitational_constant = 100;\n    conf.particles = [\n        {\n            x: 0.1,\n            y: 0\n        },\n        {\n            x: 0.2,\n            y: 0\n        },\n        {\n            x: 0.3,\n            y: 0.1\n        },\n        {\n            x: 4,\n            y: 0\n        }\n    ];\n    return conf;\n}\n\n\n\n\n//# sourceURL=webpack:///./examples.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gravitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gravitle */ \"../pkg/gravitle.js\");\n/* harmony import */ var gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gravitle/gravitle_bg */ \"../pkg/gravitle_bg.wasm\");\n/* harmony import */ var _examples_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./examples.js */ \"./examples.js\");\n/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./render.js */ \"./render.js\");\n/* harmony import */ var _tests_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tests.js */ \"./tests.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"./utils.js\");\n\n\n\n\n\n\n\n\nconst fps_infos = document.getElementById('fps-infos');\nconst infos = document.getElementById('infos');\nconst reloadButton = document.getElementById('button-reload');\nconst stepButton = document.getElementById('button-step');\nconst startButton = document.getElementById('button-start');\nconst stopButton = document.getElementById('button-stop');\nconst heartButton = document.getElementById('button-heart');\nconst diamondButton = document.getElementById('button-diamond');\nconst randomizeButton = document.getElementById('button-randomize');\nconst symetryButton = document.getElementById('button-symetry');\nconst spaceCroquetButton = document.getElementById('button-space-croquet');\nconst clubButton = document.getElementById('button-club');\nconst spadeButton = document.getElementById('button-spade');\nconst buttonExample5 = document.getElementById('button-example-5');\nconst buttonExample6 = document.getElementById('button-example-6');\nconst buttonExample7 = document.getElementById('button-example-7');\nconst buttonExample8 = document.getElementById('button-example-8');\nconst jsonTextarea = document.getElementById('json');\nconst inputCount = document.getElementById('input-count');\nconst inputWidth = document.getElementById('input-width');\nconst inputHeight = document.getElementById('input-height');\nconst inputDeltaTime = document.getElementById('input-delta-time');\nconst inputG = document.getElementById('input-g');\nconst buttonGenerateSpaceship = document.getElementById('button-spaceship');\nconst selectAlgorithm = document.getElementById('select-algorithm');\nconst selectCollisionBehavior = document.getElementById('select-collision-behavior');\nconst selectIntersectionBehavior = document.getElementById('select-intersection-behavior');\nconst selectLinkIntersectionBehavior = document.getElementById('select-link-intersection-behavior');\nconst selectWrapAround = document.getElementById('select-wrap-around');\nconst selectFixedCloneCount = document.getElementById('select-fixed-clone-count');\nconst selectStabilisePositionsEnabled = document.getElementById('select-stabilise-positions-enabled');\nconst selectWrapAroundBehavior = document.getElementById('select-wrap-around-behavior');\nconst inputMinimalDistanceForGravity = document.getElementById('input-minimal-distance-for-gravity');\nconst inputDefaultLinkLength = document.getElementById('input-default-link-length');\nconst inputDefaultLinkStrengh = document.getElementById('input-default-link-strengh');\nconst inputDragCoefficient = document.getElementById('input-drag-coefficient');\nconst inputStabilisePower = document.getElementById('input-stabiliser-power');\nconst selectTest = document.getElementById('select-test');\nconst buttonRunTest = document.getElementById('button-run-test');\nconst testDescription = document.getElementById('test-description');\n\nconst inputTrajectoriesPeriod = document.getElementById('input-trajectories-period');\nconst buttonTrajectoriesOn = document.getElementById('button-trajectories-on');\nconst buttonTrajectoriesOff = document.getElementById('button-trajectories-off');\n\nconst inputGravitationalFieldResolution = document.getElementById('input-gravitational-field-resolution');\nconst buttonGravitationalFieldOn = document.getElementById('button-gravitational-field-on');\nconst buttonGravitationalFieldOff = document.getElementById('button-gravitational-field-off');\n\nconst canvas = document.getElementById('canvas');\ncanvas.height = 1000;\ncanvas.width = 1000;\nconst context = canvas.getContext(\"2d\");\nlet bindings = {};\n\nlet MODE = null;\nlet SHOW_TRAJECTORIES = null;\nlet SHOW_GRAVITATIONAL_FIELD = null;\n\nconst BASE_CONF = _utils_js__WEBPACK_IMPORTED_MODULE_5__[\"get_base_conf_copy\"]();\nconst tests = _tests_js__WEBPACK_IMPORTED_MODULE_4__[\"get_tests\"]();\ntests.forEach(test => {\n    let option = document.createElement('option');\n    option.appendChild(document.createTextNode(test.title));\n    option.value = test.id;\n    selectTest.appendChild(option);\n});\n\nlet space_croquet_links = null;\nconst SPACE_CROQUET_LINK_COUNT = 4;\n\nconst universe = gravitle__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\nuniverse.load_from_json(JSON.stringify(BASE_CONF));\nconst launchers = [];\n\nlet interval = null;\nlet time = null;\nlet delta = null;\nlet last = null;\nlet mouse_positions = null;\nconst frame_gaps = [];\nconst frame_lengths = [];\nlet last_now = null;\nlet average_fps = 0.0;\nlet average_frame_length = 0.0;\n\nrandomizeButton.addEventListener('click', () => {\n    randomize();\n});\n\nsymetryButton.addEventListener('click', () => {\n    symetry();\n});\n\nreloadButton.addEventListener('click', () => {\n    reloadFromJSON();\n});\n\nstepButton.addEventListener('click', () => {\n    tick();\n});\n\nstartButton.addEventListener('click', () => {\n    start();\n});\n\nstopButton.addEventListener('click', () => {\n    stop();\n});\n\n\ndiamondButton.addEventListener('click', () => {\n    diamond();\n});\n\nclubButton.addEventListener('click', () => {\n    club();\n});\n\nspadeButton.addEventListener('click', () => {\n    spade();\n});\n\nbuttonExample5.addEventListener('click', () => {\n    loadExample5();\n});\n\nbuttonExample6.addEventListener('click', () => {\n    loadExample6();\n});\n\nbuttonExample7.addEventListener('click', () => {\n    loadExample7();\n});\n\nbuttonExample8.addEventListener('click', () => {\n    loadExample8();\n});\n\nbuttonRunTest.addEventListener('click', () => {\n    runTest();\n});\n\nspaceCroquetButton.addEventListener('click', () => {\n    spaceCroquet();\n});\n\nbuttonTrajectoriesOn.addEventListener('click', () => {\n    trajectoriesOn();\n});\n\nbuttonTrajectoriesOff.addEventListener('click', () => {\n    trajectoriesOff();\n});\n\nbuttonGravitationalFieldOn.addEventListener('click', () => {\n    gravitationalFieldOn();\n});\n\nbuttonGravitationalFieldOff.addEventListener('click', () => {\n    gravitationalFieldOff();\n});\n\nbuttonGenerateSpaceship.addEventListener('click', () => {\n    generateSpaceship();\n});\n\nselectAlgorithm.addEventListener('change', () => {\n    updateConf();\n});\n\nselectCollisionBehavior.addEventListener('change', () => {\n    updateConf();\n});\n\nselectIntersectionBehavior.addEventListener('change', () => {\n    updateConf();\n});\n\nselectLinkIntersectionBehavior.addEventListener('change', () => {\n    updateConf();\n});\n\nselectWrapAround.addEventListener('change', () => {\n    updateConf();\n});\n\nselectFixedCloneCount.addEventListener('change', () => {\n    updateConf();\n});\n\nselectWrapAroundBehavior.addEventListener('change', () => {\n    updateConf();\n});\n\nselectTest.addEventListener('change', () => {\n    selectTestChange();\n});\n\ninputG.addEventListener('change', () => {\n    updateConf();\n});\n\ninputWidth.addEventListener('change', () => {\n    updateConf();\n});\n\ninputHeight.addEventListener('change', () => {\n    updateConf();\n});\n\ninputDeltaTime.addEventListener('change', () => {\n    updateConf();\n});\n\nselectStabilisePositionsEnabled.addEventListener('change', () => {\n    updateConf();\n});\n\ninputMinimalDistanceForGravity.addEventListener('change', () => {\n    updateConf();\n});\n\ninputDefaultLinkLength.addEventListener('change', () => {\n    updateConf();\n});\n\ninputDefaultLinkStrengh.addEventListener('change', () => {\n    updateConf();\n});\n\ninputDragCoefficient.addEventListener('change', () => {\n    updateConf();\n});\n\ninputStabilisePower.addEventListener('change', () => {\n    updateConf();\n});\n\ncanvas.addEventListener('mousedown', (event) => {\n    mouse_positions = {};\n    mouse_positions.down = getMousePos(canvas, event);\n    mouse_positions.up = mouse_positions.down;\n});\n\ncanvas.addEventListener('mousemove', (event) => {\n    if (mouse_positions) {\n        mouse_positions.up = getMousePos(canvas, event);\n    } else {\n        // Do nothing\n    }\n});\n\ncanvas.addEventListener('mouseup', (event) => {\n    mouse_positions.up = getMousePos(canvas, event);\n    launchParticle(mouse_positions);\n    mouse_positions = null;\n});\n\nconst keyup = (e) => {\n    if (bindings && bindings[e.key]) {\n        universe.deactivate_thrust_for_links(bindings[e.key].link_indexes);\n    } else {\n        // Do nothing\n    }\n};\n\nconst keydown = (e) => {\n    if (bindings && bindings[e.key]) {\n        universe.activate_thrust_for_links(bindings[e.key].link_indexes);\n    } else {\n        // Do nothing\n    }\n};\n\nconst updateConf = () => {\n    const conf = getParameterizedConf(JSON.parse(jsonTextarea.value));\n    universe.set_algorithm_from_string(conf.algorithm);\n    universe.set_gravitational_constant(conf.gravitational_constant);\n    universe.set_width(conf.width);\n    universe.set_height(conf.height);\n    universe.set_delta_time(conf.delta_time);\n    universe.set_collision_behavior_from_string(conf.collision_behavior);\n    universe.set_intersection_behavior_from_string(conf.intersection_behavior);\n    universe.set_link_intersection_behavior_from_string(conf.link_intersection_behavior);\n    universe.set_wrap_around(conf.wrap_around);\n    universe.set_fixed_clone_count(conf.fixed_clone_count);\n    universe.set_stabilise_positions_enabled(conf.stabilise_positions_enabled);\n    universe.set_minimal_distance_for_gravity(conf.minimal_distance_for_gravity);\n    universe.set_default_link_length(conf.default_link_length);\n    universe.set_default_link_strengh(conf.default_link_strengh);\n    universe.set_drag_coefficient(conf.drag_coefficient);\n    universe.set_stabiliser_power(conf.stabiliser_power);\n    universe.set_wrap_around_behavior_from_string(conf.wrap_around_behavior);\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n}\n\nconst getParameterizedConf = (conf) => {\n    conf.algorithm = selectAlgorithm.options[selectAlgorithm.selectedIndex].value;\n    conf.gravitational_constant = parseFloat(inputG.value);\n    conf.width = parseFloat(inputWidth.value);\n    conf.height = parseFloat(inputHeight.value);\n    conf.delta_time = parseFloat(inputDeltaTime.value);\n    conf.collision_behavior = selectCollisionBehavior.options[selectCollisionBehavior.selectedIndex].value;\n    conf.intersection_behavior = selectIntersectionBehavior.options[selectIntersectionBehavior.selectedIndex].value;\n    conf.link_intersection_behavior = selectLinkIntersectionBehavior.options[selectLinkIntersectionBehavior.selectedIndex].value;\n    conf.wrap_around = selectWrapAround.options[selectWrapAround.selectedIndex].value === 'true';\n    conf.fixed_clone_count = selectFixedCloneCount.options[selectFixedCloneCount.selectedIndex].value === 'true';\n    conf.stabilise_positions_enabled =\n        selectStabilisePositionsEnabled.options[selectStabilisePositionsEnabled.selectedIndex].value === 'true';\n    conf.minimal_distance_for_gravity = parseFloat(inputMinimalDistanceForGravity.value);\n    conf.default_link_length = parseFloat(inputDefaultLinkLength.value);\n    conf.default_link_strengh = parseFloat(inputDefaultLinkStrengh.value);\n    conf.drag_coefficient = parseFloat(inputDragCoefficient.value);\n    conf.stabiliser_power = parseInt(inputStabilisePower.value);\n    conf.wrap_around_behavior = selectWrapAroundBehavior.options[selectWrapAroundBehavior.selectedIndex].value;\n    return conf;\n}\n\nconst reloadFromJSON = () => {\n    // Reload parameters values fro json\n    const parsedJson = JSON.parse(jsonTextarea.value);\n    selectAlgorithm.value = parsedJson.algorithm;\n    inputWidth.value = parsedJson.width;\n    inputHeight.value = parsedJson.height;\n    inputDeltaTime.value = parsedJson.delta_time;\n    inputG.value = parsedJson.gravitational_constant;\n    selectCollisionBehavior.value = parsedJson.collision_behavior;\n    selectIntersectionBehavior.value = parsedJson.intersection_behavior;\n    selectLinkIntersectionBehavior.value = parsedJson.link_intersection_behavior;\n    selectWrapAround.value = parsedJson.wrap_around;\n    selectFixedCloneCount.value = parsedJson.fixed_clone_count;\n    selectStabilisePositionsEnabled.value = parsedJson.stabilise_positions_enabled;\n    inputMinimalDistanceForGravity.value = parsedJson.minimal_distance_for_gravity;\n    inputDefaultLinkLength.value = parsedJson.default_link_length;\n    inputDefaultLinkStrengh.value = parsedJson.default_link_strengh;\n    inputDragCoefficient.value = parsedJson.drag_coefficient;\n    inputStabilisePower.value = parsedJson.stabiliser_power;\n    selectWrapAroundBehavior.value = parsedJson.wrap_around_behavior;\n    // Reload universe\n    stop();\n    universe.reset();\n    launchers.length = 0;\n    interval = null;\n    time = null;\n    delta = null;\n    universe.load_from_json(jsonTextarea.value);\n    start();\n};\n\nconst renderLoop = () => {\n    // Setup analytics\n    const start = Date.now();\n    // Render\n    fps_infos.textContent = `FPS : ${average_fps.toFixed(0)}\\n`\n        + `Frame : ${average_frame_length.toFixed(2)} ms`;\n    infos.textContent = universe.get_infos();\n    _render_js__WEBPACK_IMPORTED_MODULE_3__[\"draw\"](\n        context,\n        parseInt(inputGravitationalFieldResolution.value),\n        SHOW_GRAVITATIONAL_FIELD,\n        MODE,\n        parseInt(inputTrajectoriesPeriod.value),\n        SHOW_TRAJECTORIES,\n        universe,\n        gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"],\n        mouse_positions,\n        launchers\n    );\n    requestAnimationFrame(renderLoop);\n    // Update analytics\n    updateFps();\n    updateFrameLength(start);\n}\n\nconst updateFrameLength = (start) => {\n    const frame_length = Date.now() - start;\n    frame_lengths.push(frame_length);\n    while(frame_lengths.length > 100) {\n        frame_lengths.shift();\n    }\n    let frame_lengths_sum = 0.0;\n    const count = frame_lengths.length;\n    for (let i = 0 ; i < count ; i += 1) {\n        frame_lengths_sum += frame_lengths[i];\n    }\n    average_frame_length = frame_lengths_sum / count;\n};\n\nconst updateFps = () => {\n    const gap = Date.now() - last_now;\n    last_now = Date.now();\n    frame_gaps.push(gap);\n    while(frame_gaps.length > 100) {\n        frame_gaps.shift();\n    }\n    let gaps_sum = 0.0;\n    const count = frame_gaps.length;\n    for (let i = 0 ; i < count ; i+=1) {\n        gaps_sum += frame_gaps[i];\n    }\n    average_fps = 1.0 / (gaps_sum / count / 1000.0);\n};\n\nconst trajectoriesOn = () => {\n    buttonTrajectoriesOn.disabled = true;\n    buttonTrajectoriesOff.disabled = false;\n    SHOW_TRAJECTORIES = true;\n}\n\nconst trajectoriesOff = () => {\n    buttonTrajectoriesOn.disabled = false;\n    buttonTrajectoriesOff.disabled = true;\n    SHOW_TRAJECTORIES = false;\n}\n\nconst gravitationalFieldOn = () => {\n    buttonGravitationalFieldOn.disabled = true;\n    buttonGravitationalFieldOff.disabled = false;\n    SHOW_GRAVITATIONAL_FIELD = true;\n}\n\nconst gravitationalFieldOff = () => {\n    buttonGravitationalFieldOn.disabled = false;\n    buttonGravitationalFieldOff.disabled = true;\n    SHOW_GRAVITATIONAL_FIELD = false;\n}\n\nconst start = () => {\n    time = Date.now();\n    interval = setInterval(tickMultiple, 1);\n    startButton.disabled = true;\n    stopButton.disabled = false;\n};\n\nconst stop = () => {\n    if(interval) {\n        clearInterval(interval);\n    } else {\n        // NTD\n    }\n    startButton.disabled = false;\n    stopButton.disabled = true;\n};\n\nconst tick = () => {\n    universe.tick();\n    if (universe.get_particles_to_disable_indexes_length() && MODE === 'SPACE-CROQUET') {\n        universe.set_links_json(JSON.stringify(space_croquet_links));\n    } else {\n        // Do nothing\n    }\n};\n\nconst tickMultiple = () => {\n    const now = Date.now();\n    delta = now - time;\n    const resolution = universe.get_delta_time_milli();\n    while (delta > resolution) {\n        delta -= resolution;\n        tick();\n    }\n    time = now - delta;\n};\n\nconst heart = () => {\n    MODE = null;\n    const conf = _examples_js__WEBPACK_IMPORTED_MODULE_2__[\"get_example_1_conf\"](jsonCopy(BASE_CONF));\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n};\n\nconst diamond = () => {\n    MODE = null;\n    const conf = _examples_js__WEBPACK_IMPORTED_MODULE_2__[\"get_example_2_conf\"](jsonCopy(BASE_CONF));\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n};\n\nconst club = () => {\n    MODE = null;\n    const conf = _examples_js__WEBPACK_IMPORTED_MODULE_2__[\"get_example_3_conf\"](jsonCopy(BASE_CONF));\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst spade = () => {\n    MODE = null;\n    const conf = _examples_js__WEBPACK_IMPORTED_MODULE_2__[\"get_example_4_conf\"](jsonCopy(BASE_CONF));\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst loadExample5 = () => {\n    MODE = null;\n    const conf = _examples_js__WEBPACK_IMPORTED_MODULE_2__[\"get_example_5_conf\"](jsonCopy(BASE_CONF));\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst loadExample6 = () => {\n    MODE = null;\n    const conf = _examples_js__WEBPACK_IMPORTED_MODULE_2__[\"get_example_6_conf\"](jsonCopy(BASE_CONF));\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst loadExample7 = () => {\n    MODE = null;\n    const conf = _examples_js__WEBPACK_IMPORTED_MODULE_2__[\"get_example_7_conf\"](jsonCopy(BASE_CONF));\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst loadExample8 = () => {\n    MODE = null;\n    const conf = _examples_js__WEBPACK_IMPORTED_MODULE_2__[\"get_example_8_conf\"](jsonCopy(BASE_CONF));\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst selectTestChange = () => {\n    const testId = selectTest.options[selectTest.selectedIndex].value;\n    const test = _tests_js__WEBPACK_IMPORTED_MODULE_4__[\"get_test_by_id\"](testId);\n    testDescription.innerHTML = test.description;\n}\n\nconst runTest = (testId_) => {\n    const testId = testId_ ? testId_ : selectTest.options[selectTest.selectedIndex].value;\n    const test = _tests_js__WEBPACK_IMPORTED_MODULE_4__[\"get_test_by_id\"](testId);\n    MODE = test.id;\n    bindings = test.bindings;\n    jsonTextarea.value = JSON.stringify(test.conf, null, 4);\n    reloadFromJSON();\n}\n\nconst randomize = () => {\n    MODE = null;\n    const conf = getParameterizedConf(JSON.parse(jsonTextarea.value));\n    const particles = [];\n    for (let i = 0 ; i < parseFloat(inputCount.value) ; i += 1) {\n        const x = getRandomNumber(- conf.width / 5, conf.width / 5);\n        const y = getRandomNumber(- conf.height / 5, conf.height / 5);\n        const mass = getRandomNumber(0.5, 5.0);\n        const fixed = false;\n        const diameter = mass;\n        particles.push({\n            x: x,\n            y: y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n    }\n    conf.particles = particles;\n    conf.links = [];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst symetry = () => {\n    MODE = 'SYMETRY';\n    const conf = getParameterizedConf(JSON.parse(jsonTextarea.value));\n    const particles = [];\n    for (let i = 0 ; i < parseFloat(inputCount.value) ; i += 2) {\n        const x = getRandomNumber(- conf.width / 5, conf.width / 5);\n        const y = getRandomNumber(- conf.height / 5, conf.height / 5);\n        const mass = getRandomNumber(0.5, 5.0);\n        const fixed = false;\n        const diameter = mass;\n        particles.push({\n            x: x,\n            y: y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n        particles.push({\n            x: -x,\n            y: y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n    }\n    conf.particles = particles;\n    conf.links = [];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst spaceCroquet = () => {\n    MODE = 'SPACE-CROQUET';\n    const conf = jsonCopy(BASE_CONF);\n    conf.intersection_behavior = 'destroy-link';\n    conf.wrap_around = true;\n    const particles = [];\n    const links = [];\n    const zones = [];\n    const maxDiameter = 5.0;\n    const checkpointLength = conf.width / 8;\n    const innerRadius = checkpointLength / 2;\n    const zoneRadius = innerRadius + maxDiameter / 2;\n    for (let i = 0 ; i < SPACE_CROQUET_LINK_COUNT ; i += 1) {\n        let x = getRandomIntInclusive(- conf.width / 4, conf.width / 4);\n        let y = getRandomIntInclusive(- conf.height / 4, conf.height / 4);\n        let i = 1000;\n        while (isInZones(x, y, zones, zoneRadius) && i > 0) {\n            x = getRandomIntInclusive(- conf.width / 4, conf.width / 4);\n            y = getRandomIntInclusive(- conf.height / 4, conf.height / 4);\n            i -= 1;\n        }\n        if (i) {\n            zones.push({\n                x: x,\n                y: y,\n                diameter: zoneRadius * 2,\n                radius: zoneRadius,\n                fixed: true\n            });\n        }\n    }\n    for (let i = 0 ; i < zones.length ; i += 1) {\n        const mass = getRandomNumber(maxDiameter, maxDiameter);\n        const fixed = true;\n        const diameter = mass;\n        const angle = getRandomIntInclusive(0, 359);\n        const p1 = getCoordinateRotatedAround(\n            {\n                x: zones[i].x,\n                y: zones[i].y\n            },\n            {\n                x: zones[i].x + innerRadius,\n                y: zones[i].y\n            },\n            angle\n        );\n        const p2 = getCoordinateRotatedAround(\n            {\n                x: zones[i].x,\n                y: zones[i].y\n            },\n            {\n                x: zones[i].x - innerRadius,\n                y: zones[i].y\n            },\n            angle\n        );\n        particles.push({\n            x: p1.x,\n            y: p1.y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n        particles.push({\n            x: p2.x,\n            y: p2.y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n        links.push({\n            \"p1_index\": i*2,\n            \"p2_index\": i*2+1\n        });\n    }\n    conf.particles = particles;\n    conf.links = links;\n    space_croquet_links = links;\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst generateSpaceship = () => {\n    MODE = 'SPACE-SHIP';\n    const conf = jsonCopy(BASE_CONF);\n    conf.collision_behavior = 'create-link';\n    conf.intersection_behavior = 'do-nothing';\n    conf.link_intersection_behavior = 'do-nothing';\n    conf.gravitational_constant = 10;\n    conf.default_link_length = 10;\n    conf.default_link_strengh = 1000;\n    conf.drag_coefficient = 1;\n    conf.stabilise_positions_enabled = false;\n    conf.stabiliser_power = 10;\n    conf.minimal_distance_for_gravity = 1.0;\n    conf.wrap_around = true;\n    const COUNT = 16;\n    const DIVISOR = 30;\n    const particles = [];\n    const minDiameter = 4.0;\n    const maxDiameter = 5.0;\n    const MASS = 1.0;\n    const diameter = getRandomNumber(minDiameter, maxDiameter);\n    particles.push({\n        x: 0,\n        y: 0,\n        mass: MASS,\n        diameter: diameter\n    });\n    particles.push({\n        x: 0,\n        y: 0,\n        mass: MASS,\n        diameter: diameter\n    });\n    for (let i = 2 ; i < COUNT ; i += 2) {\n        const x = getRandomNumber(- conf.width / DIVISOR, conf.width / DIVISOR);\n        const y = getRandomNumber(- conf.height / DIVISOR, conf.height / DIVISOR);\n        const diameter = getRandomNumber(minDiameter, maxDiameter);\n        particles.push({\n            x: x,\n            y: y,\n            mass: MASS,\n            diameter: diameter\n        });\n        particles.push({\n            x: -x,\n            y: y,\n            mass: MASS,\n            diameter: diameter\n        });\n    }\n    conf.particles = particles;\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reloadFromJSON();\n}\n\nconst getCoordinateRotatedAround = (center, point, angle) => {\n    const angleRad = (angle) * (Math.PI / 180);\n    return {\n        x: Math.cos(angleRad) * (point.x - center.x) - Math.sin(angleRad) * (point.y - center.y) + center.x,\n        y: Math.sin(angleRad) * (point.x - center.x) + Math.cos(angleRad) * (point.y - center.y) + center.y\n    };\n}\n\nconst isInZones = (x, y, zones, zoneRadius) => {\n    let r = false;\n    for (const index in zones) {\n        const zone = zones[index];\n        if (circlesCollide(x, y, zone.x, zone.y, zone.radius, zoneRadius)) {\n            r = true;\n        } else {\n            // Do nothing\n        }\n    }\n    return r;\n}\n\nconst circlesCollide = (x1, y1, x2, y2, zoneRadius1, zoneRadius2) => {\n    const distance_squared_centers = get_distance_squared(x1, y1, x2, y2);\n    const diameters_squared = (zoneRadius1 + zoneRadius2) * (zoneRadius1 + zoneRadius2);\n    return distance_squared_centers < diameters_squared;\n}\n\nconst get_distance_squared = (x1, y1, x2, y2) => {\n    const delta_x = x1 - x2;\n    const delta_y = y1 - y2;\n    return delta_x * delta_x + delta_y * delta_y;\n}\n\nconst jsonCopy = (object) => {\n    return JSON.parse(JSON.stringify(object));\n}\n\nconst getRandomBoolean = () => {\n    return Math.random() > 0.5;\n}\n\nconst getRandomNumber = (min, max) => {\n    return Math.random() * (max - min) + min;\n}\n\nfunction getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getIndex = (row, column) => {\n    return row * width + column;\n};\n\nconst getMousePos = (canvas, event) => {\n    const rect = canvas.getBoundingClientRect(); // abs. size of element\n    const scaleX = canvas.width / rect.width;   // relationship bitmap vs. element for X\n    const scaleY = canvas.height / rect.height;  // relationship bitmap vs. element for Y\n    return {\n        x: (event.clientX - rect.left) * scaleX,   // scale mouse coordinates after they have\n        y: (event.clientY - rect.top) * scaleY     // been adjusted to be relative to element\n    }\n}\n\nconst getPositionFromCanvasToUniverse = (position_in_canvas) => {\n    const universeWidth = universe.get_width();\n    const universeHeight = universe.get_height();\n    return {\n        x: position_in_canvas.x / canvas.width * universeWidth - universeWidth * 0.5,\n        y: - (position_in_canvas.y / canvas.height * universeHeight - universeHeight * 0.5)\n    }\n}\n\nconst launchParticle = (mouse_position) => {\n    const position_in_universe = getPositionFromCanvasToUniverse(mouse_positions.down);\n    const position_in_universe_old = getPositionFromCanvasToUniverse(mouse_positions.up);\n    const dx = position_in_universe_old.x - position_in_universe.x;\n    const dy = position_in_universe_old.y - position_in_universe.y;\n    const sensibility = 0.01;\n    let collision_behavior = 'do-nothing';\n    if (MODE === 'SPACE-CROQUET') {\n        collision_behavior = 'disable-self';\n    } else {\n        // Do nothing\n    }\n    universe.add_particle_json(JSON.stringify(\n        {\n            x: position_in_universe.x,\n            y: position_in_universe.y,\n            old_x: position_in_universe.x + dx * sensibility,\n            old_y: position_in_universe.y + dy * sensibility,\n            collision_behavior: collision_behavior\n        }\n    ));\n    launchers.push(mouse_position);\n    if (MODE === 'SPACE-CROQUET') {\n        universe.set_links_json(JSON.stringify(space_croquet_links));\n    } else {\n        // Do nothing\n    }\n}\n\nheartButton.addEventListener('click', heart);\ndocument.addEventListener('keyup', keyup);\ndocument.addEventListener('keydown', keydown);\n\ntrajectoriesOff();\ngravitationalFieldOff();\nheart();\nlast_now = Date.now();\nrequestAnimationFrame(renderLoop);\nselectTestChange();\nrunTest('test_10');\ncanvas.focus();\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./render.js":
/*!*******************!*\
  !*** ./render.js ***!
  \*******************/
/*! exports provided: draw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"draw\", function() { return draw; });\nconst draw = (\n        context,\n        gravitational_field_resolution,\n        SHOW_GRAVITATIONAL_FIELD,\n        MODE,\n        period,\n        SHOW_TRAJECTORIES,\n        universe,\n        memory,\n        mouse_positions,\n        launchers\n) => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    if (SHOW_GRAVITATIONAL_FIELD === true && gravitational_field_resolution > 0) {\n        drawGravitationalGrid(universe, context, gravitational_field_resolution);\n    } else {\n        // Do nothing\n    }\n    if (MODE === 'SPACE-CROQUET') {\n        drawLaunchers(context, launchers);\n    } else {\n        // Do nothing\n    }\n    if (SHOW_TRAJECTORIES === true && period > 0) {\n        drawTrajectories(universe, context, period);\n    } else {\n        // Do nothing\n    }\n    drawSegments(universe, context, memory);\n    drawParticles(universe, context, memory);\n    drawMouseInteraction(universe, context, mouse_positions);\n};\n\nconst drawGravitationalGrid = (universe, context, resolution) => {\n    const width = resolution;\n    const height = resolution;\n    const grid = universe.get_gravitational_grid(width, height);\n    let max = -Infinity;\n    let min = Infinity;\n    for (let i = 0, l = grid.length ; i < l ; i++) {\n        grid[i] = Math.sqrt(grid[i]);\n        if (grid[i] < min) {\n            min = grid[i];\n        } else {\n            // Do nothing\n        }\n        if (grid[i] > max) {\n            max = grid[i];\n        } else {\n            // Do nothing\n        }\n    }\n    for (let i = 0 ; i < width ; i += 1) {\n        for (let j = 0 ; j < height ; j += 1) {\n            const value = (grid[i * width + j] - min) / (max-min) * 255;\n            context.fillStyle = `rgba(${value*.9}, ${value*.9}, ${value}, 1)`;\n            context.fillRect(i * canvas.width / width,\n                (height-1-j) * canvas.height / height,\n                canvas.width / width,\n                canvas.height / height\n            );\n        }\n    }\n};\n\nconst drawLaunchers = (context, launchers) => {\n    context.strokeStyle = \"#888\";\n    context.lineWidth = 2;\n    for (let i = 0 ; i < launchers.length ; i += 1 ) {\n        context.beginPath();\n        context.moveTo(launchers[i].up.x, launchers[i].up.y);\n        context.lineTo(launchers[i].down.x, launchers[i].down.y);\n        context.stroke();\n    }\n};\n\nconst drawTrajectories = (universe, context, period) => {\n    const trajectories = universe.get_trajectories_position_at_period(period);\n    context.strokeStyle = \"#888\";\n    context.lineWidth = 1;\n    const diameter = 1;\n    for (let i = 0 ; i < trajectories.length ; i += 2) {\n        const p = getPositionFromUniverseToCanvas(universe, {\n            x: trajectories[i + 0],\n            y: trajectories[i + 1]\n        });\n        context.beginPath();\n        context.arc(\n            p.x,\n            p.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n    }\n}\n\nconst drawSegments = (universe, context, memory) => {\n    context.strokeStyle = '#eee';\n    context.lineWidth = 2;\n    const link_coordinates = universe.get_links_coordinates_to_draw();\n    for (let i = 0, l = link_coordinates.length ; i < l ; i += 4 ) {\n        const p1 = getPositionFromUniverseToCanvas(universe, {\n            x: link_coordinates[i + 0],\n            y: link_coordinates[i + 1]\n        });\n        const p2 = getPositionFromUniverseToCanvas(universe, {\n            x: link_coordinates[i + 2],\n            y: link_coordinates[i + 3]\n        });\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n        context.lineTo(p2.x, p2.y);\n        context.stroke();\n    }\n    context.strokeStyle = '#88f';\n    context.lineWidth = 8;\n    const link_coordinates_thrusting = universe.get_thrusting_links_coordinates_to_draw();\n    for (let i = 0, l = link_coordinates_thrusting.length ; i < l ; i += 4 ) {\n        const p1 = getPositionFromUniverseToCanvas(universe, {\n            x: link_coordinates_thrusting[i + 0],\n            y: link_coordinates_thrusting[i + 1]\n        });\n        const p2 = getPositionFromUniverseToCanvas(universe, {\n            x: link_coordinates_thrusting[i + 2],\n            y: link_coordinates_thrusting[i + 3]\n        });\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n        context.lineTo(p2.x, p2.y);\n        context.stroke();\n    }\n};\n\nconst drawParticles = (universe, context, memory) => {\n    const particlesPointer = universe.get_particles();\n    const particlesCount = universe.get_particles_count();\n    const PARTICLE_SIZE = 14;\n    const particles = new Float64Array(memory.buffer, particlesPointer, particlesCount * PARTICLE_SIZE);\n    const unitX = canvas.width / universe.get_width();\n    const unitY = canvas.height / universe.get_height();\n    context.strokeStyle = \"#FFF\";\n    context.lineWidth = 2;\n    for (let i = 0 ; i < particles.length ; i+= PARTICLE_SIZE ) {\n        const position = getPositionFromUniverseToCanvas(universe, {\n            x: particles[i + 0],\n            y: particles[i + 1]\n        });\n        const diameter = (unitX * 0.5) * particles[i + 2];\n        context.beginPath();\n        context.arc(\n            position.x,\n            position.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n    }\n};\n\nconst drawMouseInteraction = (universe, context, mouse_positions) => {\n    if (mouse_positions) {\n        // Position\n        const unitX = canvas.width / universe.get_width();\n        const diameter = (unitX * 0.5);\n        context.strokeStyle = \"#eef\";\n        context.lineWidth = 2;\n        context.beginPath();\n        context.arc(\n            mouse_positions.down.x,\n            mouse_positions.down.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n        // Line\n        context.strokeStyle = \"#ddf\";\n        context.beginPath();\n        context.moveTo(mouse_positions.down.x, mouse_positions.down.y);\n        context.lineTo(mouse_positions.up.x, mouse_positions.up.y);\n        context.stroke();\n    } else {\n        // Do nothing\n    }\n}\n\nconst getPositionFromUniverseToCanvas = (universe, position_in_universe) => {\n    const universeWidth = universe.get_width();\n    const universeHeight = universe.get_height();\n    const unitX = canvas.width / universeWidth;\n    const unitY = canvas.height / universeHeight;\n    return {\n        x: (universeWidth * 0.5) * unitX + position_in_universe.x * unitX,\n        y: (universeHeight * 0.5) * unitY - position_in_universe.y * unitY\n    }\n}\n\n\n\n\n//# sourceURL=webpack:///./render.js?");

/***/ }),

/***/ "./tests.js":
/*!******************!*\
  !*** ./tests.js ***!
  \******************/
/*! exports provided: get_test_9, get_test_by_id, get_tests */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_test_9\", function() { return get_test_9; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_test_by_id\", function() { return get_test_by_id; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_tests\", function() { return get_tests; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./utils.js\");\n\n\n//\n// Contains a list of Universe configurations used to test the different\n// features of Gravitle.\n//\n\nconst get_test_9 = () => {\n    const test = {\n        id: 'test_9',\n        title: 'Triangles wrapping around',\n        description: `\n            Two triangles should go upward, wrap around to appear at the bottom\n            and then collide with the bottom particle and create links between\n            itself and the particle.\n            Links should then be destroyed when they intersect and be created\n            again when two particle collides.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.wrap_around = true;\n    test.conf.drag_coefficient = 0.001;\n    test.conf.collision_behavior = 'create-link';\n    test.conf.link_intersection_behavior = 'destroy-links';\n    test.conf.particles = [\n        {\n            x: 1,\n            y: 80\n        },\n        {\n            x: 2,\n            y: 90\n        },\n        {\n            x: -5,\n            y: 85\n        },\n        {\n            x: 5,\n            y: 85\n        },\n        {\n            x: 0,\n            y: -50,\n            fixed: true,\n            mass: 10,\n            diameter: 10\n        }\n    ];\n    test.conf.links = [\n        {\n            p1_index: 0,\n            p2_index: 1\n        },{\n            p1_index: 1,\n            p2_index: 2\n        },{\n            p1_index: 2,\n            p2_index: 0\n        },{\n            p1_index: 1,\n            p2_index: 3\n        },{\n            p1_index: 3,\n            p2_index: 0\n        }\n    ];\n    return test;\n};\n\nconst get_test_10 = () => {\n    const test = {\n        id: 'test_10',\n        title: 'Small spaceship',\n        description: `\n            Use [E, R, T] or [1, 2, 3] or [4, 5, 6] to move.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"](),\n        bindings: {\n            'e' : {\n                link_indexes : [0]\n            },\n            'r' : {\n                link_indexes : [1]\n            },\n            't' : {\n                link_indexes : [2]\n            },\n            '1' : {\n                link_indexes : [0]\n            },\n            '2' : {\n                link_indexes : [1]\n            },\n            '3' : {\n                link_indexes : [2]\n            },\n            '4' : {\n                link_indexes : [2]\n            },\n            '5' : {\n                link_indexes : [1]\n            },\n            '6' : {\n                link_indexes : [0]\n            }\n        }\n    };\n    test.conf.wrap_around = true;\n    test.conf.drag_coefficient = 0.1;\n    test.conf.collision_behavior = 'create-link';\n    test.conf.link_intersection_behavior = 'destroy-links';\n    test.conf.default_link_strengh = 1000.0;\n    test.conf.particles = [\n        {x: -15, y: 5},\n        {x: -5, y: 5},\n        {x: 5, y: 5},\n        {x: 15, y: 5},\n        {x: -20, y: 0},\n        {x: -10, y: 0},\n        {x: 0, y: 0},\n        {x: 10, y: 0},\n        {x: 20, y: 0},\n        {x: -5, y: -5},\n        {x: 5, y: -5}\n    ];\n    const THRUST = 100.0;\n    test.conf.links = [\n        {\n            p1_index: 4,\n            p2_index: 5\n        }, {\n            p1_index: 9,\n            p2_index: 10\n        }, {\n            p1_index: 7,\n            p2_index: 8\n        }, {\n            p1_index: 4,\n            p2_index: 0\n        }, {\n            p1_index: 0,\n            p2_index: 5\n        }, {\n            p1_index: 0,\n            p2_index: 1\n        }, {\n            p1_index: 5,\n            p2_index: 9\n        }, {\n            p1_index: 1,\n            p2_index: 6\n        }, {\n            p1_index: 6,\n            p2_index: 2\n        }, {\n            p1_index: 6,\n            p2_index: 7\n        }, {\n            p1_index: 6,\n            p2_index: 10\n        }, {\n            p1_index: 2,\n            p2_index: 3\n        }, {\n            p1_index: 2,\n            p2_index: 7\n        }, {\n            p1_index: 10,\n            p2_index: 7\n        }, {\n            p1_index: 3,\n            p2_index: 7\n        }, {\n            p1_index: 3,\n            p2_index: 8\n        }, {\n            p1_index: 5,\n            p2_index: 1\n        }, {\n            p1_index: 9,\n            p2_index: 6\n        }, {\n            p1_index: 5,\n            p2_index: 6\n        }, {\n            p1_index: 5,\n            p2_index: 6\n        }, {\n            p1_index: 1,\n            p2_index: 2\n        }\n    ];\n    return test;\n};\n\nconst get_tests = () => {\n    let list = [];\n    list.push(get_test_10());\n    list.push(get_test_9());\n    return list;\n};\n\nconst get_test_by_id = (id) => {\n    let tests = get_tests();\n    let return_test = null;\n    tests.forEach(test => {\n        if (test.id === id) {\n            return_test = test;\n        } else {\n            // Do nothing\n        }\n    });\n    return return_test;\n};\n\n\n\n\n//# sourceURL=webpack:///./tests.js?");

/***/ }),

/***/ "./utils.js":
/*!******************!*\
  !*** ./utils.js ***!
  \******************/
/*! exports provided: get_base_conf_copy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_base_conf_copy\", function() { return get_base_conf_copy; });\nconst BASE_CONF = Object.freeze({\n    algorithm: 'verlet',\n    collision_behavior: 'do-nothing',\n    intersection_behavior: 'do-nothing',\n    link_intersection_behavior: 'do-nothing',\n    wrap_around: false,\n    wrap_around_behavior: 'do-nothing',\n    fixed_clone_count: true,\n    width: 200,\n    height: 200,\n    delta_time: 0.01,\n    gravitational_constant: 66.74,\n    minimal_distance_for_gravity: 1.0,\n    default_link_length: 10,\n    default_link_strengh: 100,\n    drag_coefficient: 0.0,\n    stabilise_positions_enabled: false,\n    stabiliser_power: 10,\n    particles: [],\n    links: []\n});\n\nconst get_base_conf_copy = () => {\n    return JSON.parse(JSON.stringify(BASE_CONF));\n};\n\n\n\n\n//# sourceURL=webpack:///./utils.js?");

/***/ })

}]);