(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/gravitle.js":
/*!**************************!*\
  !*** ../pkg/gravitle.js ***!
  \**************************/
/*! exports provided: __wbg_log_db0ce4382904de06, __widl_f_now_Performance, __widl_instanceof_Window, __widl_f_performance_Window, __wbg_newnoargs_9fab447a311888a5, __wbg_call_001e26aeb2fdef67, __wbindgen_throw, Collision, Intersection, Trajectory, Universe, __wbindgen_object_clone_ref, __wbindgen_object_drop_ref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_log_db0ce4382904de06\", function() { return __wbg_log_db0ce4382904de06; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_now_Performance\", function() { return __widl_f_now_Performance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_instanceof_Window\", function() { return __widl_instanceof_Window; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_performance_Window\", function() { return __widl_f_performance_Window; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_newnoargs_9fab447a311888a5\", function() { return __wbg_newnoargs_9fab447a311888a5; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_call_001e26aeb2fdef67\", function() { return __wbg_call_001e26aeb2fdef67; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Collision\", function() { return Collision; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Intersection\", function() { return Intersection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Trajectory\", function() { return Trajectory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_clone_ref\", function() { return __wbindgen_object_clone_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony import */ var _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gravitle_bg */ \"../pkg/gravitle_bg.wasm\");\n\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbg_log_db0ce4382904de06(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    console.log(varg0);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n        let size = arg.length;\n        let ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let writeOffset = 0;\n        while (true) {\n            const view = getUint8Memory().subarray(ptr + writeOffset, ptr + size);\n            const { read, written } = cachedTextEncoder.encodeInto(arg, view);\n            writeOffset += written;\n            if (read === arg.length) {\n                break;\n            }\n            arg = arg.substring(read);\n            ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size += arg.length * 3);\n        }\n        WASM_VECTOR_LEN = writeOffset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](buf.length);\n        getUint8Memory().set(buf, ptr);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    };\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nlet cachegetFloat64Memory = null;\nfunction getFloat64Memory() {\n    if (cachegetFloat64Memory === null || cachegetFloat64Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetFloat64Memory = new Float64Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetFloat64Memory;\n}\n\nfunction getArrayF64FromWasm(ptr, len) {\n    return getFloat64Memory().subarray(ptr / 8, ptr / 8 + len);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction __widl_f_now_Performance(arg0) {\n    return getObject(arg0).now();\n}\n\nfunction __widl_instanceof_Window(idx) { return getObject(idx) instanceof Window ? 1 : 0; }\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction __widl_f_performance_Window(arg0) {\n\n    const val = getObject(arg0).performance;\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nfunction __wbg_newnoargs_9fab447a311888a5(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    return addHeapObject(new Function(varg0));\n}\n\nfunction handleError(exnptr, e) {\n    const view = getUint32Memory();\n    view[exnptr / 4] = 1;\n    view[exnptr / 4 + 1] = addHeapObject(e);\n}\n\nfunction __wbg_call_001e26aeb2fdef67(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).call(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freeCollision(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_collision_free\"](ptr);\n}\n/**\n*/\nclass Collision {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Collision.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeCollision(ptr);\n    }\n\n    /**\n    * @param {number} particle_1_index\n    * @param {number} particle_2_index\n    * @returns {Collision}\n    */\n    static new(particle_1_index, particle_2_index) {\n        return Collision.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_new\"](particle_1_index, particle_2_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_1_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_get_particle_1_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_2_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_get_particle_2_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeIntersection(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_intersection_free\"](ptr);\n}\n/**\n*/\nclass Intersection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Intersection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeIntersection(ptr);\n    }\n\n    /**\n    * @param {number} intersection_x\n    * @param {number} intersection_y\n    * @param {number} link_id\n    * @param {number} particle_id\n    * @returns {Intersection}\n    */\n    static new(intersection_x, intersection_y, link_id, particle_id) {\n        return Intersection.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_new\"](intersection_x, intersection_y, link_id, particle_id));\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_x() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_intersection_x\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_y() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_intersection_y\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_link_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_link_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_particle_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeTrajectory(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_trajectory_free\"](ptr);\n}\n/**\n*/\nclass Trajectory {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Trajectory.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeTrajectory(ptr);\n    }\n\n}\n\nfunction freeUniverse(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n}\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        return Universe.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"]());\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    load_from_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_load_from_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tick\"](this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    reset() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_reset\"](this.ptr);\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    set_links_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_links_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    add_particle_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_add_particle_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {string}\n    */\n    get_infos() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_infos\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @returns {number}\n    */\n    get_delta_time_milli() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_delta_time_milli\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_delta_time() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_delta_time\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_links() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_links_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_width() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_width\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_height() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_height\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersections() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersections\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersections_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersections_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_size() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersection_size\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} id\n    * @returns {Intersection}\n    */\n    get_intersection(id) {\n        return Intersection.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersection\"](this.ptr, id));\n    }\n    /**\n    * @returns {number}\n    */\n    get_trajectories_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectories_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} id\n    * @returns {Trajectory}\n    */\n    get_trajectory(id) {\n        return Trajectory.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectory\"](this.ptr, id));\n    }\n    /**\n    * @param {number} period\n    * @returns {Float64Array}\n    */\n    get_trajectories_position_at_period(period) {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectories_position_at_period\"](retptr, this.ptr, period);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles_to_disable_indexes_length() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles_to_disable_indexes_length\"](this.ptr) >>> 0;\n    }\n}\n\nfunction __wbindgen_object_clone_ref(idx) {\n    return addHeapObject(getObject(idx));\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n\n\n//# sourceURL=webpack:///../pkg/gravitle.js?");

/***/ }),

/***/ "../pkg/gravitle_bg.wasm":
/*!*******************************!*\
  !*** ../pkg/gravitle_bg.wasm ***!
  \*******************************/
/*! exports provided: memory, __wbindgen_global_argument_ptr, __wbg_universe_free, universe_new, universe_load_from_json, universe_tick, universe_reset, universe_set_links_json, universe_add_particle_json, universe_get_infos, universe_get_delta_time_milli, universe_get_delta_time, universe_get_particles, universe_get_particles_count, universe_get_links, universe_get_links_count, universe_get_width, universe_get_height, universe_get_intersections, universe_get_intersections_count, universe_get_intersection_size, universe_get_intersection, universe_get_trajectories_count, universe_get_trajectory, universe_get_trajectories_position_at_period, universe_get_particles_to_disable_indexes_length, __wbg_collision_free, collision_new, collision_get_particle_1_index, collision_get_particle_2_index, __wbg_trajectory_free, __wbg_intersection_free, intersection_new, intersection_get_intersection_x, intersection_get_intersection_y, intersection_get_link_index, intersection_get_particle_index, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./gravitle */ \"../pkg/gravitle.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/gravitle_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gravitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gravitle */ \"../pkg/gravitle.js\");\n/* harmony import */ var gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gravitle/gravitle_bg */ \"../pkg/gravitle_bg.wasm\");\n\n\n\nconst infos = document.getElementById('infos');\nconst reloadButton = document.getElementById('button-reload');\nconst stepButton = document.getElementById('button-step');\nconst startButton = document.getElementById('button-start');\nconst stopButton = document.getElementById('button-stop');\nconst heartButton = document.getElementById('button-heart');\nconst diamondButton = document.getElementById('button-diamond');\nconst randomizeButton = document.getElementById('button-randomize');\nconst symetryButton = document.getElementById('button-symetry');\nconst spaceCroquetButton = document.getElementById('button-space-croquet');\nconst clubButton = document.getElementById('button-club');\nconst spadeButton = document.getElementById('button-spade');\nconst buttonExample5 = document.getElementById('button-example-5');\nconst jsonTextarea = document.getElementById('json');\nconst inputCount = document.getElementById('input-count');\nconst inputWidth = document.getElementById('input-width');\nconst inputHeight = document.getElementById('input-height');\nconst inputG = document.getElementById('input-g');\n\nconst canvas = document.getElementById('canvas');\ncanvas.height = 1000;\ncanvas.width = 1000;\nconst context = canvas.getContext(\"2d\");\n\nlet MODE = null;\n\nconst BASE_CONF = Object.freeze({\n    width: 200,\n    height: 200,\n    delta_time: 0.01,\n    gravitational_constant: 66.74,\n    minimal_distance_for_gravity: 0.1,\n    algorithm: 'verlet',\n    intersection_behavior: 'do-nothing',\n    collision_behavior: 'do-nothing',\n    stabilise_positions_enabled: false,\n    stabiliser_power: 10,\n    particles: []\n});\n\nlet space_croquet_links = null;\n\nconst universe = gravitle__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\nuniverse.load_from_json(JSON.stringify(BASE_CONF));\nconst launchers = [];\n\nlet interval = null;\nlet time = null;\nlet delta = null;\nlet last = null;\nlet mouse_positions = null;\n\nrandomizeButton.addEventListener('click', () => {\n    randomize();\n});\n\nsymetryButton.addEventListener('click', () => {\n    symetry();\n});\n\nreloadButton.addEventListener('click', () => {\n    reload();\n});\n\nstepButton.addEventListener('click', () => {\n    tick();\n});\n\nstartButton.addEventListener('click', () => {\n    start();\n});\n\nstopButton.addEventListener('click', () => {\n    stop();\n});\n\nheartButton.addEventListener('click', () => {\n    heart();\n});\n\ndiamondButton.addEventListener('click', () => {\n    diamond();\n});\n\nclubButton.addEventListener('click', () => {\n    club();\n});\n\nspadeButton.addEventListener('click', () => {\n    spade();\n});\n\nbuttonExample5.addEventListener('click', () => {\n    loadExample5();\n});\n\nspaceCroquetButton.addEventListener('click', () => {\n    spaceCroquet();\n});\n\ncanvas.addEventListener('mousedown', (event) => {\n    mouse_positions = {};\n    mouse_positions.down = getMousePos(canvas, event);\n    mouse_positions.up = mouse_positions.down;\n});\n\ncanvas.addEventListener('mousemove', (event) => {\n    if (mouse_positions) {\n        mouse_positions.up = getMousePos(canvas, event);\n    } else {\n        // Do nothing\n    }\n});\n\ncanvas.addEventListener('mouseup', (event) => {\n    mouse_positions.up = getMousePos(canvas, event);\n    launchParticle(mouse_positions);\n    mouse_positions = null;\n});\n\nconst renderLoop = () => {\n    infos.textContent = universe.get_infos();\n    draw();\n    requestAnimationFrame(renderLoop);\n};\n\nconst draw = () => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    if (MODE === 'SPACE-CROQUET') {\n        drawLaunchers();\n    } else {\n        // Do nothing\n    }\n    drawTrajectories(4);\n    drawSegments();\n    drawParticles();\n    drawMouseInteraction();\n};\n\nconst drawLaunchers = () => {\n    context.strokeStyle = \"#888\";\n    context.lineWidth = 2;\n    for (let i = 0 ; i < launchers.length ; i += 1 ) {\n        context.beginPath();\n        context.moveTo(launchers[i].up.x, launchers[i].up.y);\n        context.lineTo(launchers[i].down.x, launchers[i].down.y);\n        context.stroke();\n    }\n};\n\nconst drawTrajectories = (period) => {\n    const trajectories = universe.get_trajectories_position_at_period(period);\n    context.strokeStyle = \"#888\";\n    context.lineWidth = 1;\n    const diameter = 1;\n    for (let i = 0 ; i < trajectories.length ; i += 2) {\n        const p = getPositionFromUniverseToCanvas({\n            x: trajectories[i + 0],\n            y: trajectories[i + 1]\n        });\n        context.beginPath();\n        context.arc(\n            p.x,\n            p.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n    }\n}\n\nconst drawSegments = () => {\n    const linksPointer = universe.get_links();\n    const linksCount = universe.get_links_count();\n    const LINK_SIZE = 5;\n    const links = new Float64Array(gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, linksPointer, linksCount * LINK_SIZE);\n    const universeWidth = universe.get_width();\n    const universeHeight = universe.get_height();\n    const unitX = canvas.width / universeWidth;\n    const unitY = canvas.height / universeHeight;\n    context.strokeStyle = \"#eee\";\n    context.lineWidth = 4;\n    for (let id = 0 ; id < linksCount ; id += 1 ) {\n        let i = id * LINK_SIZE;\n        const p1 = getPositionFromUniverseToCanvas({\n            x: links[i + 0],\n            y: links[i + 1]\n        });\n        const p2 = getPositionFromUniverseToCanvas({\n            x: links[i + 2],\n            y: links[i + 3]\n        });\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n        context.lineTo(p2.x, p2.y);\n        context.stroke();\n    }\n};\n\nconst drawParticles = () => {\n    const particlesPointer = universe.get_particles();\n    const particlesCount = universe.get_particles_count();\n    const PARTICLE_SIZE = 13;\n    const particles = new Float64Array(gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, particlesPointer, particlesCount * PARTICLE_SIZE);\n    const unitX = canvas.width / universe.get_width();\n    const unitY = canvas.height / universe.get_height();\n    context.strokeStyle = \"#FFF\";\n    context.lineWidth = 4;\n    for (let i = 0 ; i < particles.length ; i+= PARTICLE_SIZE ) {\n        const position = getPositionFromUniverseToCanvas({\n            x: particles[i + 0],\n            y: particles[i + 1]\n        });\n        const diameter = (unitX / 2) * particles[i + 2];\n        context.beginPath();\n        context.arc(\n            position.x,\n            position.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n    }\n};\n\nconst drawMouseInteraction = () => {\n    if (mouse_positions) {\n        // Position\n        const unitX = canvas.width / universe.get_width();\n        const diameter = (unitX / 2);\n        context.strokeStyle = \"#eef\";\n        context.lineWidth = 4;\n        context.beginPath();\n        context.arc(\n            mouse_positions.down.x,\n            mouse_positions.down.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n        // Line\n        context.strokeStyle = \"#ddf\";\n        context.beginPath();\n        context.moveTo(mouse_positions.down.x, mouse_positions.down.y);\n        context.lineTo(mouse_positions.up.x, mouse_positions.up.y);\n        context.stroke();\n    } else {\n        // Do nothing\n    }\n}\n\nconst start = () => {\n    time = Date.now();\n    interval = setInterval(tickMultiple, 1);\n    startButton.disabled = true;\n    stopButton.disabled = false;\n};\n\nconst stop = () => {\n    if(interval) {\n        clearInterval(interval);\n    } else {\n        // NTD\n    }\n    startButton.disabled = false;\n    stopButton.disabled = true;\n};\n\nconst tick = () => {\n    universe.tick();\n    if (universe.get_particles_to_disable_indexes_length() && MODE === 'SPACE-CROQUET') {\n        universe.set_links_json(JSON.stringify(space_croquet_links));\n    } else {\n        // Do nothing\n    }\n};\n\nconst tickMultiple = () => {\n    const now = Date.now();\n    delta = now - time;\n    const resolution = universe.get_delta_time_milli();\n    while (delta > resolution) {\n        delta -= resolution;\n        tick();\n    }\n    time = now - delta;\n};\n\nconst heart = () => {\n    MODE = null;\n    const conf = jsonCopy(BASE_CONF);\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 20\n        }, {\n            \"x\": 10,\n            \"y\": 30\n        }, {\n            \"x\": 20,\n            \"y\": 30\n        }, {\n            \"x\": 30,\n            \"y\": 20\n        }, {\n            \"x\": 20,\n            \"y\": 5\n        }, {\n            \"x\": 10,\n            \"y\": -10\n        }, {\n            \"x\": 0,\n            \"y\": -20\n        }, {\n            \"x\": -10,\n            \"y\": 30\n        }, {\n            \"x\": -20,\n            \"y\": 30\n        }, {\n            \"x\": -30,\n            \"y\": 20\n        }, {\n            \"x\": -20,\n            \"y\": 5\n        }, {\n            \"x\": -10,\n            \"y\": -10\n        }, {\n            \"x\": 0,\n            \"y\": -35\n        }\n    ];\n    conf.stabilise_positions_enabled = true;\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n};\n\nconst diamond = () => {\n    MODE = null;\n    const conf = jsonCopy(BASE_CONF);\n    conf.particles = [\n        {\n            \"x\": -30,\n            \"y\": -40,\n            \"fixed\": false\n        }, {\n            \"x\": -30,\n            \"y\": -41,\n            \"fixed\": false\n        }, {\n            \"x\": 0,\n            \"y\": 41,\n            \"fixed\": false\n        }, {\n            \"x\": 20,\n            \"y\": 20,\n            \"fixed\": true\n        }, {\n            \"x\": 20,\n            \"y\": -20,\n            \"fixed\": true\n        }, {\n            \"x\": -20,\n            \"y\": 20,\n            \"fixed\": true\n        }, {\n            \"x\": -20,\n            \"y\": -20,\n            \"fixed\": true\n        }, {\n            \"x\": 0,\n            \"y\": 40,\n            \"fixed\": true\n        }, {\n            \"x\": 0,\n            \"y\": -40,\n            \"fixed\": true\n        }, {\n            \"x\": 40,\n            \"y\": 0,\n            \"fixed\": true\n        }, {\n            \"x\": -40,\n            \"y\": 0,\n            \"fixed\": true\n        }\n    ];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n};\n\nconst club = () => {\n    MODE = null;\n    const conf = jsonCopy(BASE_CONF);\n    conf.particles = [\n        {\n            \"x\": 0.01,\n            \"y\": -25,\n            \"fixed\": false\n        },\n        {\n            \"x\": 10,\n            \"y\": -35,\n            \"fixed\": false\n        },\n        {\n            \"x\": -10,\n            \"y\": -35,\n            \"fixed\": false\n        },\n        {\n            \"x\": 0,\n            \"y\": 40,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": 40,\n            \"y\": -10,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": -40,\n            \"y\": -10,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        }\n    ];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n}\n\nconst spade = () => {\n    MODE = null;\n    const conf = jsonCopy(BASE_CONF);\n    conf.intersection_behavior = 'destroy-link';\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 35\n        },\n        {\n            \"x\": 10,\n            \"y\": 25,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": 25,\n            \"fixed\": true\n        },{\n            \"x\": 15,\n            \"y\": 15,\n            \"fixed\": true\n        },\n        {\n            \"x\": -15,\n            \"y\": 15,\n            \"fixed\": true\n        },{\n            \"x\": 20,\n            \"y\": 5,\n            \"fixed\": true\n        },\n        {\n            \"x\": -20,\n            \"y\": 5,\n            \"fixed\": true\n        },{\n            \"x\": 15,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": -15,\n            \"y\": 0,\n            \"fixed\": true\n        },{\n            \"x\": 5,\n            \"y\": -5,\n            \"fixed\": true\n        },\n        {\n            \"x\": -5,\n            \"y\": -5,\n            \"fixed\": true\n        },{\n            \"x\": 10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": -10,\n            \"fixed\": true\n        }\n    ];\n    conf.links = [\n        {\n            \"p1_index\": 1,\n            \"p2_index\": 2\n        }, {\n            \"p1_index\": 3,\n            \"p2_index\": 4\n        }, {\n            \"p1_index\": 5,\n            \"p2_index\": 6\n        }, {\n            \"p1_index\": 7,\n            \"p2_index\": 8\n        }, {\n            \"p1_index\": 9,\n            \"p2_index\": 10\n        }, {\n            \"p1_index\": 11,\n            \"p2_index\": 12\n        }\n    ];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n}\n\nconst loadExample5 = () => {\n    MODE = null;\n    const conf = jsonCopy(BASE_CONF);\n    conf.intersection_behavior = 'destroy-particle';\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 0\n        },\n        {\n            \"x\": -10,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 10,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": 10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": -40,\n            \"y\": 35,\n            \"fixed\": false\n        },\n        {\n            \"x\": 40,\n            \"y\": 35,\n            \"fixed\": false\n        },\n        {\n            \"x\": -50,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 50,\n            \"y\": 30,\n            \"fixed\": true\n        }\n    ];\n    conf.links = [\n        {\n            \"p1_index\": 0,\n            \"p2_index\": 1\n        },\n        {\n            \"p1_index\": 0,\n            \"p2_index\": 2\n        },\n        {\n            \"p1_index\": 3,\n            \"p2_index\": 4\n        },\n        {\n            \"p1_index\": 5,\n            \"p2_index\": 6\n        }\n    ];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n}\n\nconst randomize = () => {\n    MODE = null;\n    const conf = getParameterizedConf();\n    const particles = [];\n    for (let i = 0 ; i < parseFloat(inputCount.value) ; i += 1) {\n        const x = getRandomIntInclusive(- conf.width / 10, conf.width / 10);\n        const y = getRandomIntInclusive(- conf.height / 5, conf.height / 5);\n        const mass = getRandomNumber(0.5, 5.0);\n        const fixed = false;\n        const diameter = mass;\n        particles.push({\n            x: x,\n            y: y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n    }\n    conf.particles = particles;\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n}\n\nconst symetry = () => {\n    MODE = 'SYMETRY';\n    const conf = getParameterizedConf();\n    conf.stabilise_positions_enabled = true;\n    conf.stabiliser_power = 10;\n    conf.intersection_behavior = 'destroy-link';\n    conf.collision_behavior = 'create-link';\n    const particles = [];\n    for (let i = 0 ; i < parseFloat(inputCount.value) / 2 ; i += 1) {\n        const x = getRandomIntInclusive(- conf.width / 10, conf.width / 10);\n        const y = getRandomIntInclusive(- conf.height / 5, conf.height / 5);\n        const mass = getRandomNumber(0.5, 5.0);\n        const fixed = false;\n        const diameter = mass;\n        particles.push({\n            x: x,\n            y: y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n        particles.push({\n            x: -x,\n            y: y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n    }\n    conf.particles = particles;\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n}\n\nconst spaceCroquet = () => {\n    MODE = 'SPACE-CROQUET';\n    const conf = getParameterizedConf();\n    conf.intersection_behavior = 'destroy-link';\n    const particles = [];\n    const links = [];\n    const zones = [];\n    const maxDiameter = 5.0;\n    const checkpointLength = conf.width / 8;\n    const innerRadius = checkpointLength / 2;\n    const zoneRadius = innerRadius + maxDiameter / 2;\n    for (let i = 0 ; i < 3 ; i += 1) {\n        let x = getRandomIntInclusive(- conf.width / 4, conf.width / 4);\n        let y = getRandomIntInclusive(- conf.height / 4, conf.height / 4);\n        let i = 1000;\n        while (isInZones(x, y, zones, zoneRadius) && i > 0) {\n            x = getRandomIntInclusive(- conf.width / 4, conf.width / 4);\n            y = getRandomIntInclusive(- conf.height / 4, conf.height / 4);\n            i -= 1;\n        }\n        if (i) {\n            zones.push({\n                x: x,\n                y: y,\n                diameter: zoneRadius * 2,\n                radius: zoneRadius,\n                fixed: true\n            });\n        }\n    }\n    for (let i = 0 ; i < zones.length ; i += 1) {\n        const mass = getRandomNumber(maxDiameter, maxDiameter);\n        const fixed = true;\n        const diameter = mass;\n        const angle = getRandomIntInclusive(0, 359);\n        const p1 = getCoordinateRotatedAround(\n            {\n                x: zones[i].x,\n                y: zones[i].y\n            },\n            {\n                x: zones[i].x + innerRadius,\n                y: zones[i].y\n            },\n            angle\n        );\n        const p2 = getCoordinateRotatedAround(\n            {\n                x: zones[i].x,\n                y: zones[i].y\n            },\n            {\n                x: zones[i].x - innerRadius,\n                y: zones[i].y\n            },\n            angle\n        );\n        particles.push({\n            x: p1.x,\n            y: p1.y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n        particles.push({\n            x: p2.x,\n            y: p2.y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n        links.push({\n            \"p1_index\": i*2,\n            \"p2_index\": i*2+1\n        });\n    }\n    conf.particles = particles;\n    conf.links = links;\n    space_croquet_links = links;\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n}\n\nconst getCoordinateRotatedAround = (center, point, angle) => {\n    const angleRad = (angle) * (Math.PI / 180);\n    return {\n        x: Math.cos(angleRad) * (point.x - center.x) - Math.sin(angleRad) * (point.y - center.y) + center.x,\n        y: Math.sin(angleRad) * (point.x - center.x) + Math.cos(angleRad) * (point.y - center.y) + center.y\n    };\n}\n\nconst isInZones = (x, y, zones, zoneRadius) => {\n    let r = false;\n    for (const index in zones) {\n        const zone = zones[index];\n        if (circlesCollide(x, y, zone.x, zone.y, zone.radius, zoneRadius)) {\n            r = true;\n        } else {\n            // Do nothing\n        }\n    }\n    return r;\n}\n\nconst circlesCollide = (x1, y1, x2, y2, zoneRadius1, zoneRadius2) => {\n    const distance_squared_centers = get_distance_squared(x1, y1, x2, y2);\n    const diameters_squared = (zoneRadius1 + zoneRadius2) * (zoneRadius1 + zoneRadius2);\n    return distance_squared_centers < diameters_squared;\n}\n\nconst get_distance_squared = (x1, y1, x2, y2) => {\n    const delta_x = x1 - x2;\n    const delta_y = y1 - y2;\n    return delta_x * delta_x + delta_y * delta_y;\n}\n\nconst getParameterizedConf = () => {\n    const conf = jsonCopy(BASE_CONF);\n    conf.width = parseFloat(inputWidth.value);\n    conf.height = parseFloat(inputHeight.value);\n    conf.gravitational_constant = parseFloat(inputG.value);\n    return conf;\n}\n\nconst jsonCopy = (object) => {\n    return JSON.parse(JSON.stringify(object));\n}\n\nconst getRandomBoolean = () => {\n    return Math.random() > 0.5;\n}\n\nconst getRandomNumber = (min, max) => {\n    return Math.random() * (max - min) + min;\n}\n\nfunction getRandomIntInclusive(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst reload = () => {\n    stop();\n    universe.reset();\n    launchers.length = 0;\n    interval = null;\n    time = null;\n    delta = null;\n    universe.load_from_json(jsonTextarea.value);\n    start();\n};\n\nconst getIndex = (row, column) => {\n    return row * width + column;\n};\n\nconst getMousePos = (canvas, event) => {\n    const rect = canvas.getBoundingClientRect(); // abs. size of element\n    const scaleX = canvas.width / rect.width;   // relationship bitmap vs. element for X\n    const scaleY = canvas.height / rect.height;  // relationship bitmap vs. element for Y\n    return {\n        x: (event.clientX - rect.left) * scaleX,   // scale mouse coordinates after they have\n        y: (event.clientY - rect.top) * scaleY     // been adjusted to be relative to element\n    }\n}\n\nconst getPositionFromCanvasToUniverse = (position_in_canvas) => {\n    const universeWidth = universe.get_width();\n    const universeHeight = universe.get_height();\n    return {\n        x: position_in_canvas.x / canvas.width * universeWidth - universeWidth * 0.5,\n        y: - (position_in_canvas.y / canvas.height * universeHeight - universeHeight * 0.5)\n    }\n}\n\nconst getPositionFromUniverseToCanvas = (position_in_universe) => {\n    const universeWidth = universe.get_width();\n    const universeHeight = universe.get_height();\n    const unitX = canvas.width / universeWidth;\n    const unitY = canvas.height / universeHeight;\n    return {\n        x: (universeWidth / 2) * unitX + position_in_universe.x * unitX,\n        y: (universeHeight / 2) * unitY - position_in_universe.y * unitY\n    }\n}\n\nconst launchParticle = (mouse_position) => {\n    const position_in_universe = getPositionFromCanvasToUniverse(mouse_positions.down);\n    const position_in_universe_old = getPositionFromCanvasToUniverse(mouse_positions.up);\n    const dx = position_in_universe_old.x - position_in_universe.x;\n    const dy = position_in_universe_old.y - position_in_universe.y;\n    const sensibility = 0.01;\n    let collision_behavior = 'do-nothing';\n    if (MODE === 'SPACE-CROQUET') {\n        collision_behavior = 'disable-self';\n    } else {\n        // Do nothing\n    }\n    universe.add_particle_json(JSON.stringify(\n        {\n            x: position_in_universe.x,\n            y: position_in_universe.y,\n            old_x: position_in_universe.x + dx * sensibility,\n            old_y: position_in_universe.y + dy * sensibility,\n            collision_behavior: collision_behavior\n        }\n    ));\n    launchers.push(mouse_position);\n    if (MODE === 'SPACE-CROQUET') {\n        universe.set_links_json(JSON.stringify(space_croquet_links));\n    } else {\n        // Do nothing\n    }\n}\n\nheart();\nrequestAnimationFrame(renderLoop);\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);