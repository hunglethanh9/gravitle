(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/gravitle.js":
/*!**************************!*\
  !*** ../pkg/gravitle.js ***!
  \**************************/
/*! exports provided: Algorithm, __wbindgen_throw, Universe, __wbindgen_object_drop_ref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Algorithm\", function() { return Algorithm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony import */ var _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gravitle_bg */ \"../pkg/gravitle_bg.wasm\");\n\n\n/**\n*/\nconst Algorithm = Object.freeze({ Euler:1,Verlet:2, });\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n        let size = arg.length;\n        let ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let writeOffset = 0;\n        while (true) {\n            const view = getUint8Memory().subarray(ptr + writeOffset, ptr + size);\n            const { read, written } = cachedTextEncoder.encodeInto(arg, view);\n            writeOffset += written;\n            if (read === arg.length) {\n                break;\n            }\n            arg = arg.substring(read);\n            ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size += arg.length * 3);\n        }\n        WASM_VECTOR_LEN = writeOffset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](buf.length);\n        getUint8Memory().set(buf, ptr);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freeUniverse(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n}\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        return Universe.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"]());\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    load_from_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_load_from_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tick\"](this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    reset() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_reset\"](this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    add_particle() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_add_particle\"](this.ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get_infos() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_infos\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @returns {number}\n    */\n    get_delta_time_milli() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_delta_time_milli\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_delta_time() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_delta_time\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_width() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_width\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_height() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_height\"](this.ptr);\n    }\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n\n\n//# sourceURL=webpack:///../pkg/gravitle.js?");

/***/ }),

/***/ "../pkg/gravitle_bg.wasm":
/*!*******************************!*\
  !*** ../pkg/gravitle_bg.wasm ***!
  \*******************************/
/*! exports provided: memory, __wbindgen_global_argument_ptr, __wbg_universe_free, universe_new, universe_load_from_json, universe_tick, universe_reset, universe_add_particle, universe_get_infos, universe_get_delta_time_milli, universe_get_delta_time, universe_get_particles, universe_get_particles_count, universe_get_width, universe_get_height, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./gravitle */ \"../pkg/gravitle.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/gravitle_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gravitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gravitle */ \"../pkg/gravitle.js\");\n/* harmony import */ var gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gravitle/gravitle_bg */ \"../pkg/gravitle_bg.wasm\");\n\n\n\nconst infos = document.getElementById('infos');\nconst reloadButton = document.getElementById('button-reload');\nconst stepButton = document.getElementById('button-step');\nconst startButton = document.getElementById('button-start');\nconst stopButton = document.getElementById('button-stop');\nconst heartButton = document.getElementById('button-heart');\nconst diamondButton = document.getElementById('button-diamond');\nconst randomizeButton = document.getElementById('button-randomize');\nconst clubButton = document.getElementById('button-club');\nconst jsonTextarea = document.getElementById('json');\n\nconst canvas = document.getElementById('canvas');\ncanvas.height = 1000;\ncanvas.width = 1000;\nconst context = canvas.getContext(\"2d\");\n\nconst BASE_CONF = Object.freeze({\n    width: 200,\n    height: 200,\n    delta_time: 0.01,\n    gravitational_constant: 66.74,\n    minimal_distance_for_gravity: 0.1,\n    algorithm: gravitle__WEBPACK_IMPORTED_MODULE_0__[\"Algorithm\"].Verlet,\n    particles: []\n});\n\nconst universe = gravitle__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\nuniverse.load_from_json(JSON.stringify(BASE_CONF));\n\nlet interval = null;\nlet time = null;\nlet delta = null;\nlet last = null;\n\nrandomizeButton.addEventListener('click', () => {\n    randomize();\n});\n\nreloadButton.addEventListener('click', () => {\n    reload();\n});\n\nstepButton.addEventListener('click', () => {\n    tick();\n});\n\nstartButton.addEventListener('click', () => {\n    start();\n});\n\nstopButton.addEventListener('click', () => {\n    stop();\n});\n\nheartButton.addEventListener('click', () => {\n    heart();\n});\n\ndiamondButton.addEventListener('click', () => {\n    diamond();\n});\n\nclubButton.addEventListener('click', () => {\n    club();\n});\n\nconst renderLoop = () => {\n    infos.textContent = universe.get_infos();\n    draw();\n    requestAnimationFrame(renderLoop);\n};\n\nconst draw = () => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    const particlesPointer = universe.get_particles();\n    const particlesCount = universe.get_particles_count();\n    const PARTICLE_SIZE = 13;\n    const particles = new Float64Array(gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, particlesPointer, particlesCount * PARTICLE_SIZE);\n    const universeWidth = universe.get_width();\n    const universeHeight = universe.get_height();\n    const unitX = canvas.width / universeWidth;\n    const unitY = canvas.height / universeHeight;\n    context.strokeStyle = \"#FFF\";\n    context.lineWidth = 4;\n    for (let i = 0 ; i < particles.length ; i+= PARTICLE_SIZE ) {\n        const x = (universeWidth / 2) * unitX + particles[i + 0] * unitX;\n        const y = (universeHeight / 2) * unitY - particles[i + 1] * unitY;\n        const diameter = (unitX / 2) * particles[i + 2];\n        context.beginPath();\n        context.arc(\n            x,\n            y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n    }\n};\n\nconst start = () => {\n    time = Date.now();\n    interval = setInterval(tickMultiple, 1);\n    startButton.disabled = true;\n    stopButton.disabled = false;\n};\n\nconst stop = () => {\n    if(interval) {\n        clearInterval(interval);\n    } else {\n        // NTD\n    }\n    startButton.disabled = false;\n    stopButton.disabled = true;\n};\n\nconst tick = () => {\n    universe.tick();\n};\n\nconst tickMultiple = () => {\n    const now = Date.now();\n    delta = now - time;\n    const resolution = universe.get_delta_time_milli();\n    while (delta > resolution) {\n        delta -= resolution;\n        universe.tick();\n    }\n    time = now - delta;\n};\n\nconst heart = () => {\n    const conf = jsonCopy(BASE_CONF);\n    conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 20\n        }, {\n            \"x\": 10,\n            \"y\": 30\n        }, {\n            \"x\": 20,\n            \"y\": 30\n        }, {\n            \"x\": 30,\n            \"y\": 20\n        }, {\n            \"x\": 20,\n            \"y\": 5\n        }, {\n            \"x\": 10,\n            \"y\": -10\n        }, {\n            \"x\": 0,\n            \"y\": -20\n        }, {\n            \"x\": -10,\n            \"y\": 30\n        }, {\n            \"x\": -20,\n            \"y\": 30\n        }, {\n            \"x\": -30,\n            \"y\": 20\n        }, {\n            \"x\": -20,\n            \"y\": 5\n        }, {\n            \"x\": -10,\n            \"y\": -10\n        }, {\n            \"x\": 0,\n            \"y\": -35\n        }\n    ];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n};\n\nconst diamond = () => {\n    const conf = jsonCopy(BASE_CONF);\n    conf.particles = [\n        {\n            \"x\": -30,\n            \"y\": -40,\n            \"fixed\": false\n        }, {\n            \"x\": -30,\n            \"y\": -41,\n            \"fixed\": false\n        }, {\n            \"x\": 0,\n            \"y\": 41,\n            \"fixed\": false\n        }, {\n            \"x\": 20,\n            \"y\": 20,\n            \"fixed\": true\n        }, {\n            \"x\": 20,\n            \"y\": -20,\n            \"fixed\": true\n        }, {\n            \"x\": -20,\n            \"y\": 20,\n            \"fixed\": true\n        }, {\n            \"x\": -20,\n            \"y\": -20,\n            \"fixed\": true\n        }, {\n            \"x\": 0,\n            \"y\": 40,\n            \"fixed\": true\n        }, {\n            \"x\": 0,\n            \"y\": -40,\n            \"fixed\": true\n        }, {\n            \"x\": 40,\n            \"y\": 0,\n            \"fixed\": true\n        }, {\n            \"x\": -40,\n            \"y\": 0,\n            \"fixed\": true\n        }\n    ];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n};\n\nconst club = () => {\n    const conf = jsonCopy(BASE_CONF);\n    conf.particles = [\n        {\n            \"x\": 0.01,\n            \"y\": -25,\n            \"fixed\": false\n        },\n        {\n            \"x\": 10,\n            \"y\": -35,\n            \"fixed\": false\n        },\n        {\n            \"x\": -10,\n            \"y\": -35,\n            \"fixed\": false\n        },\n        {\n            \"x\": 0,\n            \"y\": 40,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": 40,\n            \"y\": -10,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": -40,\n            \"y\": -10,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        }\n    ];\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n}\n\nconst randomize = () => {\n    const conf = jsonCopy(BASE_CONF);\n    const particles = [];\n    for (let i = 0 ; i < 10 ; i++) {\n        const x = getRandomNumber(- conf.width / 10, conf.width / 10);\n        const y = getRandomNumber(- conf.height / 10, conf.height / 10);\n        const mass = getRandomNumber(0.5, 5.0);\n        const fixed = false;\n        const diameter = mass;\n        particles.push({\n            x: x,\n            y: y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n    }\n    conf.particles = particles;\n    jsonTextarea.value = JSON.stringify(conf, null, 4);\n    reload();\n}\n\nconst jsonCopy = (object) => {\n    return JSON.parse(JSON.stringify(object));\n}\n\nconst getRandomBoolean = () => {\n    return Math.random() > 0.5;\n}\n\nconst getRandomNumber = (min, max) => {\n    return Math.random() * (max - min) + min;\n}\n\nconst reload = () => {\n    stop();\n    universe.reset();\n    interval = null;\n    time = null;\n    delta = null;\n    universe.load_from_json(jsonTextarea.value);\n    start();\n};\n\nconst getIndex = (row, column) => {\n    return row * width + column;\n};\n\ndiamond();\nrequestAnimationFrame(renderLoop);\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);